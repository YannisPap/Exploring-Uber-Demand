ggplot(uber, aes(spd, pickups)) +
geom_jitter(alpha = 0.05) +
geom_smooth() +
scale_y_sqrt() +
coord_cartesian(ylim = c(0, 2500))
ggplot(uber.spread, aes(vsb, pickups)) +
geom_jitter(alpha = 0.1) +
geom_smooth()
ggplot(uber.spread, aes(slp, pickups)) +
geom_jitter(alpha = 0.1) +
geom_smooth()
ggplot(uber.spread, aes(pcp01, pickups)) +
xlim(0,quantile(uber.spread$pcp01, 0.95)) +
geom_jitter(alpha = 0.1) +
geom_smooth()
ggplot(uber.spread, aes(sd, pickups)) +
geom_jitter(alpha = 0.1) +
geom_smooth()
ggplot(subset(uber, !is.na(borough)), aes(hour, pickups)) +
geom_jitter(alpha = 0.3, aes(colour = borough)) +
geom_smooth(aes(color = borough))
ggplot(subset(uber, !is.na(borough)), aes(hour, pickups)) +
geom_jitter(alpha = 0.3, aes(colour = borough)) +
geom_smooth(aes(color = borough)) +
scale_y_log10()
ggplot(uber.spread, aes(x = wday, y = hour, fill = pickups)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral')
ggplot(uber.spread, aes(hour, pickups)) +
geom_jitter(alpha = 0.3, aes(colour = workday)) +
geom_smooth(aes(color = workday))
uber.major <- uber %>%
filter(borough %in% c('Manhattan', 'Brooklyn', 'Queens', 'Bronx')) %>%
droplevels()
ggplot(uber.major, aes(hour, pickups)) +
geom_jitter(alpha = 0.3, aes(colour = workday)) +
geom_smooth(aes(color = workday)) +
facet_wrap(~ borough, scales = 'free', ncol = 2)
ggplot(uber.spread, aes(workday, pickups)) +
geom_boxplot()
ggplot(uber.spread, aes(hour, Manhattan)) +
geom_jitter(alpha = 0.4, aes(color = temp > 75)) +
geom_smooth(aes(color = temp > 75))
ggplot(uber.spread, aes(hour, Manhattan)) +
geom_jitter( alpha = 0.4, aes(color = pcp01 > 0)) +
geom_smooth(aes(color = pcp01 > 0))
uber.major <- uber.major %>%
mutate(`1h` = lag(pickups)) %>%
mutate(`2h` = lag(pickups,2)) %>%
mutate(`3h` = lag(pickups,3)) %>%
mutate(`1d` = lag(pickups,24)) %>%
mutate(`1w` = lag(pickups,168))
m1 <- lm(pickups ~ pickup_dt + hour + wday + workday + borough,
data = uber.major[169:16700,])
m2 <- update(m1, ~ . + `1w`)
m3 <- update(m2, ~ . + `1d`)
m4 <- update(m3, ~ . + `3h`)
m5 <- update(m4, ~ . + `2h`)
m6 <- update(m5, ~ . + `1h`)
library(memisc)
mtable(m1, m2, m3, m4, m5, m6, sdigits = 3)
detach("package:memisc", unload=TRUE)
manhattan <- uber %>%
filter(borough == 'Manhattan') %>%
dplyr::select(pickup_dt:pickups, hour, wday, workday, yday) %>%
mutate(`1h` = lag(pickups)) %>%
mutate(`2h` = lag(pickups,2)) %>%
mutate(`3h` = lag(pickups,3)) %>%
mutate(`1d` = lag(pickups,24)) %>%
mutate(`1w` = lag(pickups,168)) %>%
dplyr::select(-borough)
manhattan.train <- manhattan[169:4175,]
m1 <- lm(pickups ~ pickup_dt + hour + wday + workday,
data = manhattan.train)
m2 <- update(m1, ~ . + `1w` - pickup_dt)
m3 <- update(m2, ~ . + `1d`)
m4 <- update(m3, ~ . + `3h`)
m5 <- update(m4, ~ . + `2h`)
m6 <- update(m5, ~ . + `1h`)
library(memisc)
mtable(m1, m2, m3, m4, m5, m6, sdigits = 3)
detach("package:memisc", unload=TRUE)
manhattan.train <- manhattan.train %>%
mutate(m1 = resid(m1)) %>%
mutate(m2 = resid(m2)) %>%
mutate(m3 = resid(m3)) %>%
mutate(m4 = resid(m4)) %>%
mutate(m5 = resid(m5)) %>%
mutate(m6 = resid(m6)) %>%
gather('model', 'residual', m1:m6)
ggplot(manhattan.train, aes(pickup_dt, residual)) +
geom_point(alpha = 0.1, aes(color = model))
test <- manhattan %>% slice(4176:4343)
model1 <- predict(m1, newdata = test)
model2 <- predict(m2, newdata = test)
model3 <- predict(m3, newdata = test)
model4 <- predict(m4, newdata = test)
model5 <- predict(m5, newdata = test)
model6 <- predict(m6, newdata = test)
test$`General Predection` <- model1
test$`Weekly Prediction` <- model2
test$`Daily Prediction` <- model3
test$`3 Hours Prediction` <- model4
test$`2 Hours Prediction` <- model5
test$`Hourly Prediction` <- model6
test <- test %>% gather('model', 'prediction', 11:16)
ggplot(test, aes(pickup_dt, pickups)) +
geom_point() +
geom_line(aes(pickup_dt, prediction, color = model, linetype = model)) +
scale_x_datetime(date_breaks = '1 day', date_labels = '%a')
test$wday <- factor(test$wday, levels = c('Wed','Thurs','Fri','Sat','Sun','Mon',
'Tues'))
ggplot(test, aes(pickup_dt, pickups)) +
geom_point() +
geom_line(aes(pickup_dt, prediction, color = model, linetype = model)) +
scale_x_datetime(date_labels = '%H') +
facet_wrap(~wday, scales = 'free_x')
ggplot(manhattan, aes(hour, pickups)) +
geom_point(alpha = 0.1) +
geom_line(data = subset(manhattan, yday == 178),
aes(hour, pickups, color = 'Saturday June 27'), )
uber$borough <- factor(uber$borough, levels = c('Manhattan', 'Brooklyn',
'Queens', 'Bronx',
'Staten Island', 'EWR'))
ggplot(subset(uber, !is.na(borough)), aes(pickups)) +
geom_histogram(aes(fill = borough), bins = 40) +
scale_x_sqrt() +
facet_wrap(~ borough, ncol = 2, scales = 'free') +
labs(title = 'Pickups per hour distribution by borough',
x = 'Pickups per hour', y = 'Count') +
theme(plot.title = element_text(size = 22, hjust = 0.5),
legend.position = 'none', axis.title = element_text(size = 16))
h1 <- ggplot(uber.spread, aes(x = wday, y = hour, fill = Manhattan)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral') +
labs(title = 'Manhattan', x = 'Day', y = 'Time', fill = 'Pickups per hour') +
theme(plot.title = element_text(hjust = 0.5))
h2 <- ggplot(uber.spread, aes(x = wday, y = hour, fill = Brooklyn)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral') +
labs(title = 'Brooklyn', x = 'Day', y = 'Time', fill = 'Pickups per hour') +
theme(plot.title = element_text(hjust = 0.5))
h3 <- ggplot(uber.spread, aes(x = wday, y = hour, fill = Queens)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral') +
labs(title = 'Queens', x = 'Day', y = 'Time', fill = 'Pickups per hour') +
theme(plot.title = element_text(hjust = 0.5))
h4 <- ggplot(uber.spread, aes(x = wday, y = hour, fill = Bronx)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral') +
labs(title = 'Bronx', x = 'Day', y = 'Time', fill = 'Pickups per hour') +
theme(plot.title = element_text(hjust = 0.5))
h5 <- ggplot(uber.spread, aes(x = wday, y = hour, fill = `Staten Island`)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral') +
labs(title = 'Staten Island', x = 'Day', y = 'Time', fill = 'Pickups per hour') +
theme(plot.title = element_text(hjust = 0.5))
h6 <- ggplot(uber.spread, aes(x = wday, y = hour, fill = EWR)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral') +
labs(title = 'EWR', x = 'Day', y = 'Time', fill = 'Pickups per hour') +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(h1,h2,h3,h4,h5,h6, ncol = 2,
top = grid::textGrob("Demand through the week per borough",
gp = grid::gpar(fontsize=22)))
test$wday <- factor(test$wday, levels = c('Wed','Thurs','Fri','Sat','Sun','Mon',
'Tues'))
ggplot(test, aes(pickup_dt, pickups)) +
geom_point() +
geom_line(aes(pickup_dt, prediction, color = model, linetype = model)) +
scale_x_datetime(date_labels = '%H') +
facet_wrap(~wday, scales = 'free_x', ncol = 2) +
labs(title = "Models' Performance", x = 'Time', y = 'Pickups') +
theme(plot.title = element_text(size = 22, hjust = 0.5),
axis.title = element_text(size = 16))
test %>% group_by(model) %>%
summarise(`r-squared` = 1 - (sum((pickups - prediction) ^ 2) /
sum((pickups - mean(pickups)) ^ 2))) %>%
arrange(desc(`r-squared`))
unlink('exploring_uber_demand_cache', recursive = TRUE)
knit_with_parameters('~/Projects/Exploring-Uber-Demand/exploring_uber_demand.Rmd')
knit_with_parameters('~/Projects/Exploring-Uber-Demand/exploring_uber_demand.Rmd')
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE,
cache = TRUE, cache.path = '../Cache/Exploring-Uber-Demand/',
fig.path = './figures/')
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(magrittr)
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(reshape2)
library(gridExtra)
library(zoo)
library(psych)
library(lubridate)
library(grid)
# Load the Data
uber <- read_csv("uber.csv", col_types = cols(
borough = col_factor(levels = c("Bronx", "Brooklyn", "EWR", "Manhattan",
"Queens", "Staten Island", "Unknown")),
hday = col_factor(levels = c("Y", "N")),
pcp01 = col_double(),
pcp06 = col_double(),
pcp24 = col_double(),
pickup_dt = col_datetime(format = "%Y-%m-%d %H:%M:%S"),
sd = col_number())) %>% data.frame()
str(uber)
histogram <- function(varname, bs = NULL, bw = NULL){
h <- ggplot(uber.spread, aes_string(varname)) + geom_histogram(bins = bs, binwidth = bw)
return(h)
}
ggplot(uber, aes(pickups)) +
geom_histogram()
ggplot(uber, aes(pickups)) +
geom_histogram() +
scale_x_sqrt() +
scale_y_sqrt()
ggplot(uber, aes(pickups)) +
geom_histogram(aes(fill = borough)) +
scale_x_sqrt(breaks = c()) +
scale_y_sqrt()
ggplot(uber, aes(pickups)) +
geom_histogram() +
scale_x_sqrt() +
facet_wrap(~ borough, ncol = 3, scales = 'free')
# In order to plot correctly the weather variables, I need to transform uber
# dataframe to wide format so that each line represent one time instance.
uber.spread <- uber %>% spread(borough, pickups, fill = 0) %>% rename(Unknown = `<NA>`)
d <- melt(uber.spread %>% dplyr::select(spd:sd)) #spd:sd = all the weather variables
ggplot(d, aes(value)) +
geom_histogram() +
facet_wrap(~variable , scales = 'free')
histogram('spd', NULL, 2)
histogram('vsb', NULL, 0.1) +
scale_y_log10(breaks = c(0, 10, 100, 1000)) +
scale_x_continuous(breaks = seq(0, 10, 1))
summary(uber.spread$vsb)
uber.spread %>% filter(vsb < 10) %>% count()
histogram('temp') +
scale_x_continuous(breaks = seq(0,90,5))
summary(uber.spread$temp)
histogram('dewp')
histogram('slp')
pcp.hist <- function(varname) {
h <- histogram(varname) + scale_x_sqrt() + scale_y_sqrt() +
coord_cartesian(xlim = c(0, 2.1), ylim = c(0, 4000))
return(h)
}
h1 <- pcp.hist('pcp01')
h2 <- pcp.hist('pcp06')
h3 <- pcp.hist('pcp24')
grid.arrange (h1, h2, h3, ncol = 1)
temp <- uber.spread %>% dplyr::select(starts_with('pcp')) %>%
gather('precipitation', 'inches', 1:3)
ggplot(temp, aes(inches)) +
geom_histogram() +
scale_x_log10() +
facet_wrap(~precipitation, ncol = 1)
histogram('sd') +
scale_x_sqrt() +
scale_y_sqrt()
uber.spread %>% filter(sd > 0) %>% count()
uber %>% group_by(borough) %>%
summarise(`Total Pickups` = sum(pickups)) %>%
arrange(desc(`Total Pickups`))
uber.spread <- uber.spread %>%
mutate(pickups = Bronx +Brooklyn + EWR + Manhattan + Queens + `Staten Island`
+ !is.na(Unknown)) %>%
mutate(day = day(pickup_dt)) %>%
mutate(hour = hour(pickup_dt)) %>%
mutate(week = week(pickup_dt)) %>%
mutate(wday = wday(pickup_dt, label = TRUE)) %>%
mutate(workday = ifelse(wday == 'Sat' | wday == 'Sun' |
hday == 'Y', 'N', 'Y')) %>%
mutate(yday = yday(pickup_dt))
uber <- uber %>%
mutate(day = day(pickup_dt)) %>%
mutate(hour = hour(pickup_dt)) %>%
mutate(week = week(pickup_dt)) %>%
mutate(wday = wday(pickup_dt, label = TRUE)) %>%
mutate(workday = ifelse(wday == 'Sat' | wday == 'Sun' |
hday == 'Y', 'N', 'Y')) %>%
mutate(yday = yday(pickup_dt))
pairs.panels(uber.spread %>% dplyr::select(pickup_dt, hday:yday))
#Bronx:Unknown = all boroughs, spd:sd = all weather variables.
pairs.panels(uber.spread %>% dplyr::select(Bronx:Unknown, spd:sd))
ggplot(uber.spread, aes(yday, pickups)) +
geom_jitter(alpha = 0.1) +
geom_line(stat = 'summary', fun.y = mean) +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = 0.25),
linetype = 2, color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = 0.5),
color = 'blue') +
geom_line(stat = 'summary', fun.y = quantile, fun.args = list(probs = 0.75),
linetype = 2, color = 'blue') +
geom_smooth() +
scale_x_continuous(breaks = c('1 Jan.' = 0, '1 Feb.' = 31, '1 Mar.' = 59,
'1 Apr.' = 90, '1 May' = 120, '1 Jun.' = 151,
'30 Jun.' = 181))
ggplot(uber.spread, aes(wday, pickups)) +
geom_boxplot()
ggplot(uber.spread, aes(hour, pickups)) +
geom_jitter(alpha = 0.2) +
geom_smooth()
m1 <- lm(formula = pickups ~ poly(hour,7), data = uber.spread)
summary(m1)
ggplot(uber.spread, aes(workday, pickups)) +
geom_boxplot()
ggplot(uber.spread, aes(workday, Brooklyn)) +
geom_boxplot()
mean((uber %>% filter(borough == 'Brooklyn') %>%
filter(workday == 'N'))$pickups) / mean((uber %>%
filter(workday == 'N'))$pickups)
ggplot(uber.spread, aes(temp, pickups)) +
geom_jitter(alpha = 0.2) +
geom_smooth()
uber.spread <- uber.spread %>% mutate(over_75 = ifelse(temp > 75, 'Y', 'N'))
uber <- uber %>% mutate(over_75 = ifelse(temp > 75, 'Y', 'N'))
ggplot(uber.spread, aes(over_75, pickups)) +
geom_boxplot()
ggplot(uber.spread,aes(pickup_dt, temp)) +
geom_point(alpha = 0.2) +
geom_smooth() +
scale_y_continuous(breaks = seq(0,80,5)) +
scale_x_datetime()
ggplot(uber.spread, aes(temp, dewp)) +
geom_jitter(alpha = 0.2) +
geom_smooth(method = lm)
ggplot(uber, aes(spd, pickups)) +
geom_jitter(alpha = 0.05) +
geom_smooth() +
scale_y_sqrt() +
coord_cartesian(ylim = c(0, 2500))
ggplot(uber.spread, aes(vsb, pickups)) +
geom_jitter(alpha = 0.1) +
geom_smooth()
ggplot(uber.spread, aes(slp, pickups)) +
geom_jitter(alpha = 0.1) +
geom_smooth()
ggplot(uber.spread, aes(pcp01, pickups)) +
xlim(0,quantile(uber.spread$pcp01, 0.95)) +
geom_jitter(alpha = 0.1) +
geom_smooth()
ggplot(uber.spread, aes(sd, pickups)) +
geom_jitter(alpha = 0.1) +
geom_smooth()
ggplot(subset(uber, !is.na(borough)), aes(hour, pickups)) +
geom_jitter(alpha = 0.3, aes(colour = borough)) +
geom_smooth(aes(color = borough))
ggplot(subset(uber, !is.na(borough)), aes(hour, pickups)) +
geom_jitter(alpha = 0.3, aes(colour = borough)) +
geom_smooth(aes(color = borough)) +
scale_y_log10()
ggplot(uber.spread, aes(x = wday, y = hour, fill = pickups)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral')
ggplot(uber.spread, aes(hour, pickups)) +
geom_jitter(alpha = 0.3, aes(colour = workday)) +
geom_smooth(aes(color = workday))
uber.major <- uber %>%
filter(borough %in% c('Manhattan', 'Brooklyn', 'Queens', 'Bronx')) %>%
droplevels()
ggplot(uber.major, aes(hour, pickups)) +
geom_jitter(alpha = 0.3, aes(colour = workday)) +
geom_smooth(aes(color = workday)) +
facet_wrap(~ borough, scales = 'free', ncol = 2)
ggplot(uber.spread, aes(workday, pickups)) +
geom_boxplot()
ggplot(uber.spread, aes(hour, Manhattan)) +
geom_jitter(alpha = 0.4, aes(color = temp > 75)) +
geom_smooth(aes(color = temp > 75))
ggplot(uber.spread, aes(hour, Manhattan)) +
geom_jitter( alpha = 0.4, aes(color = pcp01 > 0)) +
geom_smooth(aes(color = pcp01 > 0))
uber.major <- uber.major %>%
mutate(`1h` = lag(pickups)) %>%
mutate(`2h` = lag(pickups,2)) %>%
mutate(`3h` = lag(pickups,3)) %>%
mutate(`1d` = lag(pickups,24)) %>%
mutate(`1w` = lag(pickups,168))
m1 <- lm(pickups ~ pickup_dt + hour + wday + workday + borough,
data = uber.major[169:16700,])
m2 <- update(m1, ~ . + `1w`)
m3 <- update(m2, ~ . + `1d`)
m4 <- update(m3, ~ . + `3h`)
m5 <- update(m4, ~ . + `2h`)
m6 <- update(m5, ~ . + `1h`)
library(memisc)
mtable(m1, m2, m3, m4, m5, m6, sdigits = 3)
detach("package:memisc", unload=TRUE)
manhattan <- uber %>%
filter(borough == 'Manhattan') %>%
dplyr::select(pickup_dt:pickups, hour, wday, workday, yday) %>%
mutate(`1h` = lag(pickups)) %>%
mutate(`2h` = lag(pickups,2)) %>%
mutate(`3h` = lag(pickups,3)) %>%
mutate(`1d` = lag(pickups,24)) %>%
mutate(`1w` = lag(pickups,168)) %>%
dplyr::select(-borough)
manhattan.train <- manhattan[169:4175,]
m1 <- lm(pickups ~ pickup_dt + hour + wday + workday,
data = manhattan.train)
m2 <- update(m1, ~ . + `1w` - pickup_dt)
m3 <- update(m2, ~ . + `1d`)
m4 <- update(m3, ~ . + `3h`)
m5 <- update(m4, ~ . + `2h`)
m6 <- update(m5, ~ . + `1h`)
library(memisc)
mtable(m1, m2, m3, m4, m5, m6, sdigits = 3)
detach("package:memisc", unload=TRUE)
manhattan.train <- manhattan.train %>%
mutate(m1 = resid(m1)) %>%
mutate(m2 = resid(m2)) %>%
mutate(m3 = resid(m3)) %>%
mutate(m4 = resid(m4)) %>%
mutate(m5 = resid(m5)) %>%
mutate(m6 = resid(m6)) %>%
gather('model', 'residual', m1:m6)
ggplot(manhattan.train, aes(pickup_dt, residual)) +
geom_point(alpha = 0.1, aes(color = model))
test <- manhattan %>% slice(4176:4343)
model1 <- predict(m1, newdata = test)
model2 <- predict(m2, newdata = test)
model3 <- predict(m3, newdata = test)
model4 <- predict(m4, newdata = test)
model5 <- predict(m5, newdata = test)
model6 <- predict(m6, newdata = test)
test$`General Predection` <- model1
test$`Weekly Prediction` <- model2
test$`Daily Prediction` <- model3
test$`3 Hours Prediction` <- model4
test$`2 Hours Prediction` <- model5
test$`Hourly Prediction` <- model6
test <- test %>% gather('model', 'prediction', 11:16)
ggplot(test, aes(pickup_dt, pickups)) +
geom_point() +
geom_line(aes(pickup_dt, prediction, color = model, linetype = model)) +
scale_x_datetime(date_breaks = '1 day', date_labels = '%a')
test$wday <- factor(test$wday, levels = c('Wed','Thurs','Fri','Sat','Sun','Mon',
'Tues'))
ggplot(test, aes(pickup_dt, pickups)) +
geom_point() +
geom_line(aes(pickup_dt, prediction, color = model, linetype = model)) +
scale_x_datetime(date_labels = '%H') +
facet_wrap(~wday, scales = 'free_x')
ggplot(manhattan, aes(hour, pickups)) +
geom_point(alpha = 0.1) +
geom_line(data = subset(manhattan, yday == 178),
aes(hour, pickups, color = 'Saturday June 27'), )
uber$borough <- factor(uber$borough, levels = c('Manhattan', 'Brooklyn',
'Queens', 'Bronx',
'Staten Island', 'EWR'))
ggplot(subset(uber, !is.na(borough)), aes(pickups)) +
geom_histogram(aes(fill = borough), bins = 40) +
scale_x_sqrt() +
facet_wrap(~ borough, ncol = 2, scales = 'free') +
labs(title = 'Pickups per hour distribution by borough',
x = 'Pickups per hour', y = 'Count') +
theme(plot.title = element_text(size = 22, hjust = 0.5),
legend.position = 'none', axis.title = element_text(size = 16))
h1 <- ggplot(uber.spread, aes(x = wday, y = hour, fill = Manhattan)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral') +
labs(title = 'Manhattan', x = 'Day', y = 'Time', fill = 'Pickups per hour') +
theme(plot.title = element_text(hjust = 0.5))
h2 <- ggplot(uber.spread, aes(x = wday, y = hour, fill = Brooklyn)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral') +
labs(title = 'Brooklyn', x = 'Day', y = 'Time', fill = 'Pickups per hour') +
theme(plot.title = element_text(hjust = 0.5))
h3 <- ggplot(uber.spread, aes(x = wday, y = hour, fill = Queens)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral') +
labs(title = 'Queens', x = 'Day', y = 'Time', fill = 'Pickups per hour') +
theme(plot.title = element_text(hjust = 0.5))
h4 <- ggplot(uber.spread, aes(x = wday, y = hour, fill = Bronx)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral') +
labs(title = 'Bronx', x = 'Day', y = 'Time', fill = 'Pickups per hour') +
theme(plot.title = element_text(hjust = 0.5))
h5 <- ggplot(uber.spread, aes(x = wday, y = hour, fill = `Staten Island`)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral') +
labs(title = 'Staten Island', x = 'Day', y = 'Time', fill = 'Pickups per hour') +
theme(plot.title = element_text(hjust = 0.5))
h6 <- ggplot(uber.spread, aes(x = wday, y = hour, fill = EWR)) +
geom_tile() +
scale_fill_distiller(palette = 'Spectral') +
labs(title = 'EWR', x = 'Day', y = 'Time', fill = 'Pickups per hour') +
theme(plot.title = element_text(hjust = 0.5))
grid.arrange(h1,h2,h3,h4,h5,h6, ncol = 2,
top = grid::textGrob("Demand through the week per borough",
gp = grid::gpar(fontsize=22)))
test$wday <- factor(test$wday, levels = c('Wed','Thurs','Fri','Sat','Sun','Mon',
'Tues'))
ggplot(test, aes(pickup_dt, pickups)) +
geom_point() +
geom_line(aes(pickup_dt, prediction, color = model, linetype = model)) +
scale_x_datetime(date_labels = '%H') +
facet_wrap(~wday, scales = 'free_x', ncol = 2) +
labs(title = "Models' Performance", x = 'Time', y = 'Pickups') +
theme(plot.title = element_text(size = 22, hjust = 0.5),
axis.title = element_text(size = 16))
test %>% group_by(model) %>%
summarise(`r-squared` = 1 - (sum((pickups - prediction) ^ 2) /
sum((pickups - mean(pickups)) ^ 2))) %>%
arrange(desc(`r-squared`))
